django:
  env:
    DJANGO_ADMIN_URL: django-cli137.apps.marble.ccs.ornl.gov
    DOMAIN_NAME: django-cli137.apps.marble.ccs.ornl.gov
    KEYCLOAK_URL: "keycloak"
    DJANGO_SECRET_KEY: "2oop3rs3kr1t"

  ingress:
    enabled: false
    hosts:
    - host: django-cli137.apps.marble.ccs.ornl.gov
      paths:
      - path: /
        pathType: ImplementationSpecific

  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - topologyKey: "kubernetes.io/hostname"
        labelSelector:
          matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - marble12.ccs.ornl.gov

react:
  env:
    PUBLIC_URL: react-cli137.apps.marble.ccs.ornl.gov
    REACT_APP_KEYCLOAK_URL: "keycloak"
    REACT_APP_METAGRID_API_URL: django-cli137.apps.marble.ccs.ornl.gov

  podAnnotations:
    ccs.ornl.gov/fs: olcf
  
  ingress:
    enabled: true
    hosts:
    - host: react-cli137.apps.marble.ccs.ornl.gov
      paths:
      - path: /
        pathType: ImplementationSpecific

  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - topologyKey: "kubernetes.io/hostname"
        labelSelector:
          matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - marble12.ccs.ornl.gov

postgresql:
  postgresql:
    replicaCount: 1
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
    password: pgpass
    repmgrPassword: repmgrpass
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - topologyKey: "kubernetes.io/hostname"
          labelSelector:
            matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
              - marble12.ccs.ornl.gov
  pgpool:
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
    adminPassword: pgpooladminpass
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - topologyKey: "kubernetes.io/hostname"
          labelSelector:
            matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
              - marble12.ccs.ornl.gov

extraManifests:
- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    name: react
    namespace: cli137
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: 'react:latest'
    resources:
      limits:
        cpu: '4'
        memory: 4Gi
      requests:
        cpu: '2'
        memory: 2Gi
    successfulBuildsHistoryLimit: 5
    failedBuildsHistoryLimit: 5
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: Dockerfile
    postCommit: {}
    source:
      type: Git
      dockerfile: |
        # Pull official base image
        FROM node:gallium-alpine3.15 as build

        # Set working directory
        WORKDIR /app

        # Add `/app/node_modules/.bin` to $PATH
        ENV PATH /app/node_modules/.bin:$PATH

        # Install app dependencies
        COPY package.json ./
        COPY yarn.lock ./
        RUN yarn install --verbose --frozen-lock-file --network-timeout=1000000

        # Add app
        COPY . ./
        RUN mv .envs/.production/.react.template .envs/.production/.react
        RUN echo 'GENERATE_SOURCEMAP=false' >> .envs/.production/.react

        RUN yarn build:production

        # Build production environment
        FROM nginxinc/nginx-unprivileged
        COPY --from=build /app/build /usr/share/nginx/html

        CMD ["nginx-debug", "-g", "daemon off;"]

      git:
        uri: 'https://github.com/aims-group/metagrid.git'
        ref: master
      contextDir: frontend
    triggers:
      - type: ConfigChange
    runPolicy: Serial

- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: react
    name: react
  spec:
    lookupPolicy:
      local: false
    tags:
      - annotations: null
        from:
          kind: DockerImage
          name: metagrid_production_react
        generation: null
        importPolicy: {}
        name: latest
        referencePolicy:
          type: ""

- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    name: django
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: django:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: Git
      git:
        uri: https://github.com/aims-group/metagrid.git
        ref: master
      contextDir: backend
      dockerfile: |
        FROM python:3.9-slim-buster

        ENV PYTHONUNBUFFERED 1

        RUN apt-get update \
            # dependencies for building Python packages
            && apt-get install -y build-essential \
            # psycopg2 dependencies
            && apt-get install -y libpq-dev \
            # Translations dependencies
            && apt-get install -y gettext \
            # cleaning up unused files
            && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
            && rm -rf /var/lib/apt/lists/*

        RUN addgroup --system django \
            && adduser --system --ingroup django django

        # Requirements are installed here to ensure they will be cached.
        COPY ./requirements /requirements
        RUN pip install --no-cache-dir -r /requirements/production.txt django-extensions==3.1.5 \
            && rm -rf /requirements

        COPY --chown=django:django . /app

        USER django

        RUN python /app/manage.py collectstatic --noinput

        WORKDIR /app

        CMD ["/usr/local/bin/gunicorn", "config.wsgi", "--bind", "0.0.0.0:5000", "--chdir=/app"]

    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: Dockerfile
        env:
        - name: DATABASE_URL
          value: '{{ include "metagrid.pg_uri" $ }}'
        - name: KEYCLOAK_URL
          value: 'keycloak'
        - name: KEYCLOAK_REALM
          value: 'realm'
        - name: KEYCLOAK_CLIENT_ID
          value: 'client'
        - name: CORS_ORIGIN_WHITELIST
          value: 'whitelist'
    triggers:
      - type: ConfigChange

- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: django
    name: django
  spec:
    lookupPolicy:
      local: false
    tags:
      - annotations: null
        from:
          kind: DockerImage
          name: metagrid_production_django
        generation: null
        importPolicy: {}
        name: latest
        referencePolicy:
          type: ""
